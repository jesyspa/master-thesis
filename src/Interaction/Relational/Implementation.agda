module Interaction.Relational.Implementation where

open import ThesisPrelude
open import Algebra.Proposition
open import Algebra.Relation
open import Algebra.Indexed.Monad
open import Algebra.Indexed.Atkey
open import Algebra.Indexed.MonadRelMorphism
open import Interaction.Relational.InteractionStructure 
open import Interaction.Relational.FreeMonad 

open InteractionStructure
open IxMonad {{...}}
open IxMonadRelMorphism

module _ {S}(IS : IStruct S){ùë∫ : Set} where
  Implementation : (M : (ùë∫ ‚Üí Set) ‚Üí ùë∫ ‚Üí Set)(RS : Relation S ùë∫) ‚Üí Set
  Implementation M RS = ‚àÄ{s s‚Ä≤}(sr : RS s s‚Ä≤)(c : Command IS s) ‚Üí M (DepRelAtkey RS (Response IS c) (next IS)) s‚Ä≤

module _ {S}{IS : IStruct S}{ùë∫ : Set}{M : (ùë∫ ‚Üí Set) ‚Üí ùë∫ ‚Üí Set}{{_ : IxMonad M}}{RS : Relation S ùë∫} where
  {-# TERMINATING #-}
  uprop-Impl : Implementation IS M RS ‚Üí IxMonadRelMorphism (FreeMonad IS) M RS
  TermRM  (uprop-Impl impl) pf fun (Return-FM a) = return‚Å± (fun pf a)
  TermRM  (uprop-Impl impl) pf fun (Invoke-FM c cont) = impl pf c >>=‚Å± Œª { (DepRelV r pf‚Ä≤) ‚Üí TermRM (uprop-Impl impl) pf‚Ä≤ fun (cont r) }

module _ {S‚ÇÅ S‚ÇÇ}(IS‚ÇÅ : IStruct S‚ÇÅ)(IS‚ÇÇ : IStruct S‚ÇÇ)(RS : Relation S‚ÇÅ S‚ÇÇ) where
  SyntacticImplementation : Set
  SyntacticImplementation = Implementation IS‚ÇÅ (FreeMonad IS‚ÇÇ) RS

SynImpl = SyntacticImplementation

module _ {S}{IS : IStruct S} where
  id-SI : SynImpl IS IS _‚â°_
  id-SI refl c = Invoke-FM c Œª r ‚Üí Return-FM (DepRelV r refl)

module _ {S‚ÇÅ S‚ÇÇ}{IS‚ÇÅ : IStruct S‚ÇÅ}{IS‚ÇÇ : IStruct S‚ÇÇ}{RS} where
  fmap-SynImpl-FM : (si : SynImpl IS‚ÇÅ IS‚ÇÇ RS) ‚Üí IxMonadRelMorphism (FreeMonad IS‚ÇÅ) (FreeMonad IS‚ÇÇ)  RS
  fmap-SynImpl-FM = uprop-Impl

module _ {S‚ÇÅ S‚ÇÇ S‚ÇÉ}{IS‚ÇÅ : IStruct S‚ÇÅ}{IS‚ÇÇ : IStruct S‚ÇÇ}{IS‚ÇÉ : IStruct S‚ÇÉ}{R‚ÇÅ R‚ÇÇ} where
  {-# TERMINATING #-}
  comp-SI : SynImpl IS‚ÇÅ IS‚ÇÇ R‚ÇÅ ‚Üí SynImpl IS‚ÇÇ IS‚ÇÉ R‚ÇÇ ‚Üí SynImpl IS‚ÇÅ IS‚ÇÉ (comp-R R‚ÇÅ R‚ÇÇ)
  comp-SI si sj (s‚ÇÅ , p‚ÇÅ , p‚ÇÇ) c = TermRM (fmap-SynImpl-FM sj) p‚ÇÇ (Œª { q‚ÇÇ (DepRelV r q‚ÇÅ) ‚Üí DepRelV r (_ , q‚ÇÅ , q‚ÇÇ) }) (si p‚ÇÅ c)

  infixr 9 _‚àò‚Ä≤-SI_
  _‚àò‚Ä≤-SI_ : SynImpl IS‚ÇÇ IS‚ÇÉ R‚ÇÇ ‚Üí SynImpl IS‚ÇÅ IS‚ÇÇ R‚ÇÅ ‚Üí SynImpl IS‚ÇÅ IS‚ÇÉ (comp-R R‚ÇÅ R‚ÇÇ)
  _‚àò‚Ä≤-SI_ = flip comp-SI

module _ {S‚ÇÅ S‚ÇÇ}{IS‚ÇÅ : IStruct S‚ÇÅ}{IS‚ÇÇ : IStruct S‚ÇÇ}{RS}(m : ISMorphism IS‚ÇÅ IS‚ÇÇ RS) where
  open ISMorphism m
  fmap-IS-SynImpl : SynImpl IS‚ÇÅ IS‚ÇÇ RS
  fmap-IS-SynImpl pf c = Invoke-FM (CommandF pf c) Œª r ‚Üí Return-FM (DepRelV (ResponseF pf r) (nextF pf r))

  fmap-IS-FM : FMMorphism IS‚ÇÅ IS‚ÇÇ RS
  fmap-IS-FM = fmap-SynImpl-FM fmap-IS-SynImpl

module _ {S‚ÇÅ S‚ÇÇ T‚ÇÅ T‚ÇÇ}
         {IS‚ÇÅ : IStruct S‚ÇÅ}{IS‚ÇÇ : IStruct S‚ÇÇ}
         {JS‚ÇÅ : IStruct T‚ÇÅ}{JS‚ÇÇ : IStruct T‚ÇÇ}
         {R‚ÇÅ : Relation S‚ÇÅ T‚ÇÅ}{R‚ÇÇ : Relation S‚ÇÇ T‚ÇÇ} where
  binmap-SI : SynImpl IS‚ÇÅ JS‚ÇÅ R‚ÇÅ ‚Üí SynImpl IS‚ÇÇ JS‚ÇÇ R‚ÇÇ ‚Üí SynImpl (BinTensor-IS IS‚ÇÅ IS‚ÇÇ) (BinTensor-IS JS‚ÇÅ JS‚ÇÇ) (parcomp-R R‚ÇÅ R‚ÇÇ)
  binmap-SI si sj {s‚ÇÅ , s‚ÇÇ} {t‚ÇÅ , t‚ÇÇ} (p‚ÇÅ , p‚ÇÇ) (left  c)
    = goal 
    where lem : FreeMonad JS‚ÇÅ (DepRelAtkey R‚ÇÅ (Response IS‚ÇÅ c) (next IS‚ÇÅ)) t‚ÇÅ
          lem = si p‚ÇÅ c
          rewrap : ‚àÄ{t t‚Ä≤} ‚Üí incL-R t t‚Ä≤
                 ‚Üí DepRelAtkey R‚ÇÅ (Response IS‚ÇÅ c) (next IS‚ÇÅ) t
                 ‚Üí DepRelAtkey (parcomp-R R‚ÇÅ R‚ÇÇ) (Response IS‚ÇÅ c) (Œª r ‚Üí next IS‚ÇÅ r , s‚ÇÇ) t‚Ä≤
          rewrap {.ta} {ta , tb} refl at = {!!}
          goal : FreeMonad (BinTensor-IS JS‚ÇÅ JS‚ÇÇ) (DepRelAtkey (parcomp-R R‚ÇÅ R‚ÇÇ) (Response IS‚ÇÅ c) (Œª r ‚Üí next IS‚ÇÅ r , s‚ÇÇ)) (t‚ÇÅ , t‚ÇÇ)
          -- Ergo: we are looking for a response r in a state related to next IS‚ÇÅ r. 
          goal = TermRM (fmap-IS-FM IncL-IS) refl rewrap lem
-- this almost works:
--    = TermRM (fmap-IS-FM IncL-IS) refl (Œª { {.t} {t , t‚Ä≤} refl (DepRelV r {.t} pf) ‚Üí DepRelV r {{!? , ?!}} {!!} }) (si p‚ÇÅ c)
  binmap-SI si sj {s‚ÇÅ , s‚ÇÇ} {t‚ÇÅ , t‚ÇÇ} (p‚ÇÅ , p‚ÇÇ) (right c) = {!!}
  {-
  binmap-SI si sj {s‚ÇÅ , s‚ÇÇ} {t‚ÇÅ , t‚ÇÇ} pf (left  c) = TermRM (fmap-IS-FM IncL-IS) $ fmap‚Å± (Œª { (DepRelV x pf) ‚Üí DepRelV x ? }) $ si ? c
  binmap-SI si sj {s‚ÇÅ , s‚ÇÇ} {t‚ÇÅ , t‚ÇÇ} pf (right c) = TermRM (fmap-IS-FM IncR-IS) $ fmap‚Å± (Œª { (DepRelV x pf) ‚Üí DepRelV x ? }) $ sj ? c
  -}


module Interaction.Indexed.Implementation where

open import ThesisPrelude
open import Algebra.Proposition
open import Algebra.Indexed.Monad
open import Algebra.Indexed.Atkey
open import Algebra.Indexed.MonadMorphism
open import Interaction.Indexed.InteractionStructure 
open import Interaction.Indexed.FreeMonad 
open import Utility.BTAll 

open InteractionStructure
open IxMonad {{...}}
open IxMonadMorphism

module _ {S}(IS : IStruct S){ùë∫ : Set} where
  Implementation : (M : (ùë∫ ‚Üí Set) ‚Üí ùë∫ ‚Üí Set)(StateF : BTAll‚Ä≤ S ‚Üí ùë∫) ‚Üí Set
  Implementation M StateF = {s : BTAll‚Ä≤ S}(c : Command IS s) ‚Üí M (StrongAtkey (Response IS c) (StateF ‚àò‚Ä≤ next IS c)) (StateF s)

module _ {S}{IS : IStruct S}{ùë∫ : Set}{M : (ùë∫ ‚Üí Set) ‚Üí ùë∫ ‚Üí Set}{{_ : IxMonad M}}{StateF : BTAll‚Ä≤ S ‚Üí ùë∫} where
  open IxMonadMorphism
  {-# TERMINATING #-}
  uprop-Impl : Implementation IS M StateF ‚Üí IxMonadMorphism (FreeMonad IS) M
  StateM (uprop-Impl impl) = StateF
  TermM (uprop-Impl impl) (Return-FM a) = return‚Å± a
  TermM (uprop-Impl impl) (Invoke-FM c cont) = impl c >>=‚Å± Œª { (StrongV r refl) ‚Üí TermM (uprop-Impl impl) (cont r) }

module _ {S‚ÇÅ S‚ÇÇ}(IS‚ÇÅ : IStruct S‚ÇÅ)(IS‚ÇÇ : IStruct S‚ÇÇ)(StateF : BTAll‚Ä≤ S‚ÇÅ ‚Üí BTAll‚Ä≤ S‚ÇÇ) where
  SyntacticImplementation : Set
  SyntacticImplementation = Implementation IS‚ÇÅ (FreeMonad IS‚ÇÇ) StateF

SynImpl = SyntacticImplementation

module _ {S}{IS : IStruct S} where
  id-SI : SynImpl IS IS id
  id-SI c = Invoke-FM c Œª r ‚Üí Return-FM (StrongV r refl)

module _ {S‚ÇÅ S‚ÇÇ}{IS‚ÇÅ : IStruct S‚ÇÅ}{IS‚ÇÇ : IStruct S‚ÇÇ}{StateF : BTAll‚Ä≤ S‚ÇÅ ‚Üí BTAll‚Ä≤ S‚ÇÇ} where
  fmap-SynImpl-FM : (si : SynImpl IS‚ÇÅ IS‚ÇÇ StateF) ‚Üí IxMonadMorphism (FreeMonad IS‚ÇÅ) (FreeMonad IS‚ÇÇ) 
  fmap-SynImpl-FM = uprop-Impl

module _ {S‚ÇÅ S‚ÇÇ S‚ÇÉ}{IS‚ÇÅ : IStruct S‚ÇÅ}{IS‚ÇÇ : IStruct S‚ÇÇ}{IS‚ÇÉ : IStruct S‚ÇÉ}{f g} where
  open IxMonadMorphism
  {-# TERMINATING #-}
  comp-SI : SynImpl IS‚ÇÅ IS‚ÇÇ f ‚Üí SynImpl IS‚ÇÇ IS‚ÇÉ g ‚Üí SynImpl IS‚ÇÅ IS‚ÇÉ (g ‚àò‚Ä≤ f)
  comp-SI si sj x = TermM (fmap-SynImpl-FM sj) (fmap‚Å± (Œª { (StrongV r refl) ‚Üí StrongV r refl }) (si x))

  infixr 9 _‚àò‚Ä≤-SI_
  _‚àò‚Ä≤-SI_ : SynImpl IS‚ÇÇ IS‚ÇÉ g ‚Üí SynImpl IS‚ÇÅ IS‚ÇÇ f ‚Üí SynImpl IS‚ÇÅ IS‚ÇÉ (g ‚àò‚Ä≤ f)
  _‚àò‚Ä≤-SI_ = flip comp-SI

module _ {S‚ÇÅ S‚ÇÇ}{IS‚ÇÅ : IStruct S‚ÇÅ}{IS‚ÇÇ : IStruct S‚ÇÇ}{StateF : BTAll‚Ä≤ S‚ÇÅ ‚Üí BTAll‚Ä≤ S‚ÇÇ}(m : ISMorphism IS‚ÇÅ IS‚ÇÇ StateF) where
  open ISMorphism m
  fmap-IS-SynImpl : SynImpl IS‚ÇÅ IS‚ÇÇ StateF
  fmap-IS-SynImpl c = Invoke-FM (CommandF c) lem
    where lem : ‚àÄ r ‚Üí FreeMonad IS‚ÇÇ (StrongAtkey (Response IS‚ÇÅ c) (StateF ‚àò‚Ä≤ next IS‚ÇÅ c)) (next IS‚ÇÇ _ r)
          lem r = Return-FM (StrongV (ResponseF r) (sym (nextF r)))  

  fmap-IS-FM : FMMorphism IS‚ÇÅ IS‚ÇÇ
  fmap-IS-FM = fmap-SynImpl-FM fmap-IS-SynImpl

module _ {S‚ÇÅ S‚ÇÇ T‚ÇÅ T‚ÇÇ}
         {IS‚ÇÅ : IStruct S‚ÇÅ}{IS‚ÇÇ : IStruct S‚ÇÇ}
         {JS‚ÇÅ : IStruct T‚ÇÅ}{JS‚ÇÇ : IStruct T‚ÇÇ}
         {StateF‚ÇÅ : BTAll‚Ä≤ S‚ÇÅ ‚Üí BTAll‚Ä≤ T‚ÇÅ}{StateF‚ÇÇ : BTAll‚Ä≤ S‚ÇÇ ‚Üí BTAll‚Ä≤ T‚ÇÇ} where
  binmap-SI : SynImpl IS‚ÇÅ JS‚ÇÅ StateF‚ÇÅ ‚Üí SynImpl IS‚ÇÇ JS‚ÇÇ StateF‚ÇÇ ‚Üí SynImpl (BinTensor-IS IS‚ÇÅ IS‚ÇÇ) (BinTensor-IS JS‚ÇÅ JS‚ÇÇ) (StateF‚ÇÅ ***-BT‚Ä≤ StateF‚ÇÇ)
  binmap-SI si sj {s ‚ñµ t} (left  c) = TermM (fmap-IS-FM $ IncL-IS (StateF‚ÇÇ t)) $ fmap‚Å± (Œª { (StrongV x refl) ‚Üí StrongV x refl }) $ si c
  binmap-SI si sj {s ‚ñµ t} (right c) = TermM (fmap-IS-FM $ IncR-IS (StateF‚ÇÅ s)) $ fmap‚Å± (Œª { (StrongV x refl) ‚Üí StrongV x refl }) $ sj c

module Interaction.Indexed.Implementation where

open import ThesisPrelude
open import Algebra.Proposition
open import Algebra.Indexed.Monad
open import Algebra.Indexed.Atkey
open import Algebra.Indexed.MonadMorphism
open import Interaction.Indexed.InteractionStructure 
open import Interaction.Indexed.FreeMonad 

open InteractionStructure
open IxMonad {{...}}
open IxMonadMorphism

module _ {S}(IS : IStruct S){ùë∫ : Set} where
  record Implementation (M : (ùë∫ ‚Üí Set) ‚Üí ùë∫ ‚Üí Set)(StateF : S ‚Üí ùë∫) : Set where
    field
      RunImpl : {s : S}(c : Command IS s) ‚Üí M (StrongAtkey (Response IS c) (StateF ‚àò‚Ä≤ next IS)) (StateF s)

open Implementation

module _ {S}{IS : IStruct S}{ùë∫ : Set}{M : (ùë∫ ‚Üí Set) ‚Üí ùë∫ ‚Üí Set}{{_ : IxMonad M}}{StateF : S ‚Üí ùë∫} where
  open IxMonadMorphism
  {-# TERMINATING #-}
  uprop-Impl : Implementation IS M StateF ‚Üí IxMonadMorphism (FreeMonad IS) M StateF
  RunIxMM (uprop-Impl impl) (Return-FM a) = return‚Å± a
  RunIxMM (uprop-Impl impl) (Invoke-FM c cont) = RunImpl impl c >>=‚Å± Œª { (StrongV r refl) ‚Üí RunIxMM (uprop-Impl impl) (cont r) }

module _ {S‚ÇÅ S‚ÇÇ}(IS‚ÇÅ : IStruct S‚ÇÅ)(IS‚ÇÇ : IStruct S‚ÇÇ)(StateF : S‚ÇÅ ‚Üí S‚ÇÇ) where
  SyntacticImplementation : Set
  SyntacticImplementation = Implementation IS‚ÇÅ (FreeMonad IS‚ÇÇ) StateF

SynImpl = SyntacticImplementation

module _ {S}{IS : IStruct S} where
  id-SI : SynImpl IS IS id
  RunImpl id-SI c = Invoke-FM c Œª r ‚Üí Return-FM (StrongV r refl)

module _ {S‚ÇÅ S‚ÇÇ}{IS‚ÇÅ : IStruct S‚ÇÅ}{IS‚ÇÇ : IStruct S‚ÇÇ}{StateF : S‚ÇÅ ‚Üí S‚ÇÇ} where
  fmap-SynImpl-FM : (si : SynImpl IS‚ÇÅ IS‚ÇÇ StateF) ‚Üí FMMorphism IS‚ÇÅ IS‚ÇÇ StateF
  fmap-SynImpl-FM = uprop-Impl

module _ {S‚ÇÅ S‚ÇÇ S‚ÇÉ}{IS‚ÇÅ : IStruct S‚ÇÅ}{IS‚ÇÇ : IStruct S‚ÇÇ}{IS‚ÇÉ : IStruct S‚ÇÉ}{f g} where
  open IxMonadMorphism
  {-# TERMINATING #-}
  comp-SI : SynImpl IS‚ÇÅ IS‚ÇÇ f ‚Üí SynImpl IS‚ÇÇ IS‚ÇÉ g ‚Üí SynImpl IS‚ÇÅ IS‚ÇÉ (g ‚àò‚Ä≤ f)
  RunImpl (comp-SI si sj) x = RunIxMM (fmap-SynImpl-FM sj) (fmap‚Å± (Œª { (StrongV r refl) ‚Üí StrongV r refl }) (RunImpl si x))

  infixr 9 _‚àò‚Ä≤-SI_
  _‚àò‚Ä≤-SI_ : SynImpl IS‚ÇÇ IS‚ÇÉ g ‚Üí SynImpl IS‚ÇÅ IS‚ÇÇ f ‚Üí SynImpl IS‚ÇÅ IS‚ÇÉ (g ‚àò‚Ä≤ f)
  _‚àò‚Ä≤-SI_ = flip comp-SI

module _ {S‚ÇÅ S‚ÇÇ}{IS‚ÇÅ : IStruct S‚ÇÅ}{IS‚ÇÇ : IStruct S‚ÇÇ}{StateF : S‚ÇÅ ‚Üí S‚ÇÇ}(m : ISMorphism IS‚ÇÅ IS‚ÇÇ StateF) where
  open ISMorphism m
  fmap-IS-SynImpl : SynImpl IS‚ÇÅ IS‚ÇÇ StateF
  RunImpl fmap-IS-SynImpl c = Invoke-FM (CommandF c) lem
    where lem : ‚àÄ r ‚Üí FreeMonad IS‚ÇÇ (StrongAtkey (Response IS‚ÇÅ c) (StateF ‚àò‚Ä≤ next IS‚ÇÅ)) (next IS‚ÇÇ r)
          lem r = Return-FM (StrongV (ResponseF r) (sym (nextF r)))  

  fmap-IS-FM : FMMorphism IS‚ÇÅ IS‚ÇÇ StateF
  fmap-IS-FM = fmap-SynImpl-FM fmap-IS-SynImpl

module _ {S‚ÇÅ S‚ÇÇ T‚ÇÅ T‚ÇÇ}
         {IS‚ÇÅ : IStruct S‚ÇÅ}{IS‚ÇÇ : IStruct S‚ÇÇ}
         {JS‚ÇÅ : IStruct T‚ÇÅ}{JS‚ÇÇ : IStruct T‚ÇÇ}
         {StateF‚ÇÅ : S‚ÇÅ ‚Üí T‚ÇÅ}{StateF‚ÇÇ : S‚ÇÇ ‚Üí T‚ÇÇ} where
  binmap-SI : SynImpl IS‚ÇÅ JS‚ÇÅ StateF‚ÇÅ ‚Üí SynImpl IS‚ÇÇ JS‚ÇÇ StateF‚ÇÇ ‚Üí SynImpl (BinTensor-IS IS‚ÇÅ IS‚ÇÇ) (BinTensor-IS JS‚ÇÅ JS‚ÇÇ) (StateF‚ÇÅ ***‚Ä≤ StateF‚ÇÇ)
  RunImpl (binmap-SI si sj) {s , t} (left  c)
    = RunIxMM (fmap-IS-FM $ IncL-IS (StateF‚ÇÇ t)) $ fmap‚Å± (Œª { (StrongV x refl) ‚Üí StrongV x refl }) $ RunImpl si c
  RunImpl (binmap-SI si sj) {s , t} (right c)
    = RunIxMM (fmap-IS-FM $ IncR-IS (StateF‚ÇÅ s)) $ fmap‚Å± (Œª { (StrongV x refl) ‚Üí StrongV x refl }) $ RunImpl sj c

module Interaction.Indexed.Implementation where

open import ThesisPrelude
open import Algebra.Proposition
open import Algebra.Indexed.Monad
open import Algebra.Indexed.Atkey
open import Algebra.Indexed.MonadMorphism
open import Interaction.Indexed.InteractionStructure 
open import Interaction.Indexed.FreeMonad 
open import Utility.BTAll 

open InteractionStructure
open IxMonad {{...}}

module _ {S}(IS : IStruct S){ùë∫ : Set} where
  record Implementation (M : (ùë∫ ‚Üí Set) ‚Üí ùë∫ ‚Üí Set)(StateF : BTAll‚Ä≤ S ‚Üí ùë∫) : Set where
    field
      RunImpl : {s : BTAll‚Ä≤ S}(c : Command IS s) ‚Üí M (StrongAtkey (Response IS c) (StateF ‚àò‚Ä≤ next IS c)) (StateF s)

open Implementation

module _ {S}{IS : IStruct S}{ùë∫ : Set}{M : (ùë∫ ‚Üí Set) ‚Üí ùë∫ ‚Üí Set}{{_ : IxMonad M}}{StateF : BTAll‚Ä≤ S ‚Üí ùë∫} where
  open IxStrongMonadMorphism
  uprop-Impl : Implementation IS M StateF ‚Üí IxStrongMonadMorphism (FreeMonad IS) M StateF
  RunIxSMM (uprop-Impl impl) h (Return-FM a) = return‚Å± (h a)
  RunIxSMM (uprop-Impl impl) h (Invoke-FM c cont) = RunImpl impl c >>=‚Å± Œª { (StrongV r refl) ‚Üí RunIxSMM (uprop-Impl impl) h (cont r) }

module _ {S‚ÇÅ S‚ÇÇ}(IS‚ÇÅ : IStruct S‚ÇÅ)(IS‚ÇÇ : IStruct S‚ÇÇ)(StateF : BTAll‚Ä≤ S‚ÇÅ ‚Üí BTAll‚Ä≤ S‚ÇÇ) where
  SyntacticImplementation : Set
  SyntacticImplementation = Implementation IS‚ÇÅ (FreeMonad IS‚ÇÇ) StateF

SynImpl = SyntacticImplementation

module _ {S}{IS : IStruct S} where
  id-SI : SynImpl IS IS id
  RunImpl id-SI c = Invoke-FM c Œª r ‚Üí Return-FM (StrongV r refl)

module _ {S‚ÇÅ S‚ÇÇ}{IS‚ÇÅ : IStruct S‚ÇÅ}{IS‚ÇÇ : IStruct S‚ÇÇ}{StateF : BTAll‚Ä≤ S‚ÇÅ ‚Üí BTAll‚Ä≤ S‚ÇÇ} where
  fmap-SynImpl-FM : (si : SynImpl IS‚ÇÅ IS‚ÇÇ StateF) ‚Üí StrongFMMorphism IS‚ÇÅ IS‚ÇÇ StateF
  fmap-SynImpl-FM = uprop-Impl

module _ {S‚ÇÅ S‚ÇÇ S‚ÇÉ}{IS‚ÇÅ : IStruct S‚ÇÅ}{IS‚ÇÇ : IStruct S‚ÇÇ}{IS‚ÇÉ : IStruct S‚ÇÉ}{f g} where
  open IxStrongMonadMorphism
  comp-SI : SynImpl IS‚ÇÅ IS‚ÇÇ f ‚Üí SynImpl IS‚ÇÇ IS‚ÇÉ g ‚Üí SynImpl IS‚ÇÅ IS‚ÇÉ (g ‚àò‚Ä≤ f)
  RunImpl (comp-SI si sj) x = RunIxSMM (fmap-SynImpl-FM sj) (rewrap-StrongAtkey g) (RunImpl si x)

  infixr 9 _‚àò‚Ä≤-SI_
  _‚àò‚Ä≤-SI_ : SynImpl IS‚ÇÇ IS‚ÇÉ g ‚Üí SynImpl IS‚ÇÅ IS‚ÇÇ f ‚Üí SynImpl IS‚ÇÅ IS‚ÇÉ (g ‚àò‚Ä≤ f)
  _‚àò‚Ä≤-SI_ = flip comp-SI

module _ {S‚ÇÅ S‚ÇÇ}{IS‚ÇÅ : IStruct S‚ÇÅ}{IS‚ÇÇ : IStruct S‚ÇÇ}{StateF : BTAll‚Ä≤ S‚ÇÅ ‚Üí BTAll‚Ä≤ S‚ÇÇ}(m : ISMorphism IS‚ÇÅ IS‚ÇÇ StateF) where
  open ISMorphism m
  fmap-IS-SynImpl : SynImpl IS‚ÇÅ IS‚ÇÇ StateF
  RunImpl fmap-IS-SynImpl c = Invoke-FM (CommandF c) lem
    where lem : ‚àÄ r ‚Üí FreeMonad IS‚ÇÇ (StrongAtkey (Response IS‚ÇÅ c) (StateF ‚àò‚Ä≤ next IS‚ÇÅ c)) (next IS‚ÇÇ _ r)
          lem r = Return-FM (StrongV (ResponseF r) (sym (nextF r)))  

  fmap-IS-FM : StrongFMMorphism IS‚ÇÅ IS‚ÇÇ StateF
  fmap-IS-FM = fmap-SynImpl-FM fmap-IS-SynImpl

module _ {S‚ÇÅ S‚ÇÇ T‚ÇÅ T‚ÇÇ}
         {IS‚ÇÅ : IStruct S‚ÇÅ}{IS‚ÇÇ : IStruct S‚ÇÇ}
         {JS‚ÇÅ : IStruct T‚ÇÅ}{JS‚ÇÇ : IStruct T‚ÇÇ}
         {StateF‚ÇÅ : BTAll‚Ä≤ S‚ÇÅ ‚Üí BTAll‚Ä≤ T‚ÇÅ}{StateF‚ÇÇ : BTAll‚Ä≤ S‚ÇÇ ‚Üí BTAll‚Ä≤ T‚ÇÇ} where
  open IxStrongMonadMorphism
  binmap-SI : SynImpl IS‚ÇÅ JS‚ÇÅ StateF‚ÇÅ ‚Üí SynImpl IS‚ÇÇ JS‚ÇÇ StateF‚ÇÇ ‚Üí SynImpl (BinTensor-IS IS‚ÇÅ IS‚ÇÇ) (BinTensor-IS JS‚ÇÅ JS‚ÇÇ) (StateF‚ÇÅ ***-BT‚Ä≤ StateF‚ÇÇ)
  RunImpl (binmap-SI si sj) {s‚ÇÅ ‚ñµ s‚ÇÇ} (left  c)
    = RunIxSMM (fmap-IS-FM $ IncL-IS (StateF‚ÇÇ s‚ÇÇ)) (rewrap-StrongAtkey Œª t‚ÇÅ ‚Üí t‚ÇÅ ‚ñµ StateF‚ÇÇ s‚ÇÇ) (RunImpl si c)
  RunImpl (binmap-SI si sj) {s‚ÇÅ ‚ñµ s‚ÇÇ} (right c)
    = RunIxSMM (fmap-IS-FM $ IncR-IS (StateF‚ÇÅ s‚ÇÅ)) (rewrap-StrongAtkey Œª t‚ÇÇ ‚Üí StateF‚ÇÅ s‚ÇÅ ‚ñµ t‚ÇÇ) (RunImpl sj c)

open import ThesisPrelude using (Monad)
open import Algebra.Parametrised.Monad 
module Utility.State.Parametrised.Transformer {l l‚Ä≤}{T : Set l‚Ä≤}(M : T ‚Üí T ‚Üí Set l ‚Üí Set l){{PMM : ParMonad M}} where

open import ThesisPrelude

open ParMonad PMM

ParStateT : T √ó Set l ‚Üí T √ó Set l ‚Üí Set l ‚Üí Set l
ParStateT (t , S) (t‚Ä≤ , S‚Ä≤) X = S ‚Üí M t t‚Ä≤ (X √ó S‚Ä≤)

fmap-ST : ‚àÄ{S S‚Ä≤ A B} ‚Üí (A ‚Üí B) ‚Üí ParStateT S S‚Ä≤ A ‚Üí ParStateT S S‚Ä≤ B
fmap-ST {S , t} {S‚Ä≤ , t‚Ä≤} f st s = fmap (first f) (st s)

module _ {S S‚Ä≤} where
  instance
    FunctorStateT : Functor (ParStateT S S‚Ä≤)
    FunctorStateT = record { fmap = fmap-ST {S} {S‚Ä≤} }

return·µñ-ST : ‚àÄ{S A} ‚Üí A ‚Üí ParStateT S S A
return·µñ-ST {t , S} a = Œª s ‚Üí return·µñ (a , s)

bind·µñ-ST : ‚àÄ{S S‚Ä≤ S‚Ä≥ A B} ‚Üí ParStateT S S‚Ä≤ A ‚Üí (A ‚Üí ParStateT S‚Ä≤ S‚Ä≥ B) ‚Üí ParStateT S S‚Ä≥ B
bind·µñ-ST {_ , _} {_ , _} {_ , _} st f = Œª s ‚Üí st s >>=·µñ uncurry f

instance
  -- I have no clue why the explicit annotations are necessary here.
  ParMonadStateT : ParMonad {ùë∫ = T √ó Set l} ParStateT
  ParMonad.return·µñ       ParMonadStateT {S} a = return·µñ-ST {S} a
  ParMonad._>>=·µñ_        ParMonadStateT {S‚ÇÄ} {S‚ÇÅ} {S‚ÇÇ} st f = bind·µñ-ST {S‚ÇÄ} {S‚ÇÅ} {S‚ÇÇ} st f
  ParMonad.super-functor ParMonadStateT {S} {S‚Ä≤} = FunctorStateT {S} {S‚Ä≤}

modify·µñ-ST : ‚àÄ{S S‚Ä≤ t} ‚Üí (S ‚Üí S‚Ä≤) ‚Üí ParStateT (t , S) (t , S‚Ä≤) S‚Ä≤
modify·µñ-ST f = Œª s ‚Üí return·µñ (f s , f s)


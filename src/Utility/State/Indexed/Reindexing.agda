open import ThesisPrelude using (Monad)
open import Algebra.Indexed.Monad 
open import ThesisPrelude
module Utility.State.Indexed.Reindexing {l l‚Ä≤}{T : Set l}{ùë∫ : Set l‚Ä≤}(ev : ùë∫ ‚Üí Set l‚Ä≤)(M : (T ‚Üí Set l‚Ä≤) ‚Üí (T ‚Üí Set l‚Ä≤)){{IMM : IxMonad M}} where

open import Algebra.Lift
open import Algebra.Indexed.Atkey 

open IxMonad IMM

IxStateT·µ£ : (ùë∫ √ó T ‚Üí Set l‚Ä≤) ‚Üí (ùë∫ √ó T ‚Üí Set l‚Ä≤)
IxStateT·µ£ A (S , t) = ev S ‚Üí M (Œª t‚Ä≤ ‚Üí Œ£ ùë∫ Œª S‚Ä≤ ‚Üí A (S‚Ä≤ , t‚Ä≤) √ó ev S‚Ä≤) t

modify-ST·µ£ : ‚àÄ{S S‚Ä≤ t} ‚Üí (ev S ‚Üí ev S‚Ä≤) ‚Üí IxStateT·µ£ (Atkey (ev S‚Ä≤) (S‚Ä≤ , t)) (S , t)
modify-ST·µ£ {S} {S‚Ä≤} {t} f s = return‚Å± (S‚Ä≤ , V (f s) , f s) 

fmap‚Å±-ST·µ£ : ‚àÄ{S A B} ‚Üí (‚àÄ{S‚Ä≤} ‚Üí A S‚Ä≤ ‚Üí B S‚Ä≤) ‚Üí IxStateT·µ£ A S ‚Üí IxStateT·µ£ B S
fmap‚Å±-ST·µ£ {S , t} f st s = fmap‚Å± (second (first f)) (st s)

lift-ST·µ£ : ‚àÄ{S t A} ‚Üí M A t ‚Üí IxStateT·µ£ (A ‚àò‚Ä≤ snd) (S , t)
lift-ST·µ£ {S} ma s = fmap‚Å± (Œª a ‚Üí S , a , s) ma

return‚Å±-ST·µ£ : ‚àÄ{S A} ‚Üí A S ‚Üí IxStateT·µ£ A S
return‚Å±-ST·µ£ {S , t} a s = return‚Å± (S , a , s)

bind‚Å±-ST·µ£ : ‚àÄ{S A B} ‚Üí IxStateT·µ£ A S ‚Üí (‚àÄ{S‚Ä≤} ‚Üí A S‚Ä≤ ‚Üí IxStateT·µ£ B S‚Ä≤) ‚Üí IxStateT·µ£ B S
bind‚Å±-ST·µ£ {S , t} {A} {B} st f s = st s >>=‚Å± Œª { (S‚Ä≤ , a , s‚Ä≤) ‚Üí f a s‚Ä≤ }

instance
  IxMonadStateT : IxMonad IxStateT·µ£
  IxMonad.return‚Å± IxMonadStateT {A} {S}     = return‚Å±-ST·µ£ {S} {A}
  IxMonad._>>=‚Å±_  IxMonadStateT {A} {B} {S} = bind‚Å±-ST·µ£   {S} {A} {B}
  IxMonad.fmap‚Å±   IxMonadStateT {A} {B} {S} = fmap‚Å±-ST·µ£   {S} {A} {B}
